"sets   
set exrc
set relativenumber
set nu
set ruler
set nocompatible
set tabstop=3
set shiftwidth=3
set cindent
syntax enable
set nohls
set is 
set scrolloff=8
set nowrap
set background=dark
"cursor

"heaven
imap jj <Esc>
inoremap <C-h> <Esc>bciw

"well..
nnoremap D Vd
nnoremap C Vc
nnoremap Y y$
nnoremap S Vs

"word text
nnoremap <BS> a<BS><Esc>
nnoremap <CR> a<CR><Esc>

"for windows/tabs
map <Tab>j <C-W>j_
map <Tab>k <C-W>k_
map <Tab>h <C-W>h_
map <Tab>l <C-W>l_
map <Tab>o <C-W>o_

"new window
nnoremap EF :vs<CR>
nnoremap ES :sp<CR>

"window resizing

"height
nmap - <C-W>-
nmap + <C-W>+

"width
nmap > <C-W>>
nmap < <C-W><

"write and quits (bear with me)
nmap FQ :q!<CR>
nmap WQ :wq<CR>
nmap WW :w<CR>

"indentation
vnoremap > >gv
vnoremap < <gv

"moving lines
nnoremap K :m .-2<CR>
nnoremap J :m .+1<CR>
vnoremap K :m '<-2<CR>gv
vnoremap J :m '>+1<CR>gv


"plugins
call plug#begin()
	
Plug 'tpope/vim-surround'
Plug 'preservim/NERDTree'
Plug 'vim-airline/vim-airline'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'gruvbox-community/gruvbox'
Plug 'preservim/nerdcommenter'
Plug 'voldikss/vim-floaterm'

call plug#end()

let mapleader = " "
nnoremap <leader> :!

filetype plugin on

"color backgrounds
colorscheme gruvbox


" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"practice mappings
map <F2> :NERDTreeToggle<CR>
map <F3> :!explorer.exe .<CR>
map <F4> :FloatermToggle<CR>
tmap <F4> <C-W>:FloatermToggle<CR>
